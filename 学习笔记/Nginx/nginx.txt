
ngxin特性：
    基本功能：
        静态资源的web服务器，能缓存打开的文件描素符；
        反向代理服务器、缓存、负载均衡；
        支持FastCGI
        模块化，非DSO(动态)机制，但tengine支持，过滤器gzip，SSI和图像大小调整等
        支持SSL

    扩展功能：
        基于名称和IP做虚拟主机
        支持keepalive
        支持平滑配置更新或程序版本升级
        支持定制访问日志，支持使用日志缓存以提高性能
        支持url rewrite(URL地址重写)
        支持路径别名
        支持基于IP及用户的认证
        支持速率限制，并发限制等；


    nginx的基本架构

        一个master进程，多个worker进程(或者说线程)     [linux本身是不支持线程的，为什么？] linux进程本身就是轻量级
        一个worker可以负责多个请求的方式进行工作
        一般worker线程取决于服务器cpu的物理核心数，一般小于，避免进程切换
            比如有24核心，一般就22个worker或者23个，避免进程切换或者说降低进程切换的可能性。
                其中一个核心运行系统，另外的全部绑定的cpu固有核心上进行工作，避免进程切换或者说降低进程切换的可能性。
                tengine有自动生成worker数量的特性。

        如果作为反向代理的有可能会生成一个缓存管理进程以及缓存清理进程

        基于事件驱动机制：库名kqueue(FREEBSD),库名epoll(linux上),库名 /dev/poll
            非事件驱动[消息通知]：select,poll,rt signals
        支持sendfile
        支持文件的AIO机制[从磁盘获取文件的纯IO,异步IO]
        支持mmap

    nginx：非阻塞、事件驱动、一个master多个worker、一个worker响应多个用户请求

    nginx的模块类别：
        核心模块
        标准http模块
        可选的http模块
        邮件模块
        第三方扩展模块

    安装方法：
        编译安装
        rpm包安装
            epel源



    Nginx的配置文件：
        main(核心)配置段
        各上下配置段(各模块配置段)
        http {

        }

        mail {

        }

        配置参数需要以分号结尾
        所有以#号开头的都是注释
        语法格式：
            参数名     值1  [值2 ...];


            还支持使用变量：
                模块内置变量
                用户自定义变量
                    set var_name value

        Nginx基本核心配置的类别：
            用于调试、定位问题
            正常运行的必备配置
            优化性能的配置
            事件类的配置

        worker进程应该以普通用户身份运行：nginx用户、nginx组

            HTTP的方法：GET、HEAD、POST、PUT、DELETE、OPTIONS、TRACE


        nginx的配置
            正常运行的必备配置：
                1、user username [groupname];
                    指定运行worker进程的用户和组
                2、pid        /var/run/nginx.pid;
                    指定nginx的pid文件路径
                3、worker_rlimit_nofile    9999;
                    指定一个worker进程所能够打开的最大文件句柄数
                4、worker_rlimit_sigpending    Number;
                    设定每个用户能够发往worker进程的信号的数量

            优化性能相关的配置：
                1、worker_processes  Number;
                    worker进程的个数；通常其数值应该为CPU的物理核心数减1或者减2；
                2、worker_cpu_affinity cpumask   ...;
                    0000
                    0001
                    0010
                    1000

                    比如系统有8核心，绑定worker进程到6个核心上，留下两个核心主要运行系统进程
                    worker_processes  6;
                    worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000
                    保证这6个worker进程都单独在所在的cpu上运行，但不保证这6个cpu会运行系统进程。

                3、ssl_engine device;
                    在存在ssl硬件加速器的服务器上，指定所使用的ssl硬件加速设备

                4、timer_resolution 100ms;
                    每次内核事件调用返回时，都会使用gettimeofday()来获取当前系统时间用来更新nginx缓存时钟；
                    timer_resolution用于定义每隔多久才会由gettimeofday()更新一次缓存时钟；
                    x86_64架构的系统上，gettimeofday()代价已经很小，可以忽略此项配置

                5、worker_priority nice;
                    nice为-20至19之间的值；值越小优先级越高。

            事件相关的配置
                1、accept_mutex    [on|off]
                    是否打开Nginx的负载均衡锁；此锁能够让多个worker进程轮流的、序列化的与新的客户端建立连接
                    而通常当一个worker进程的负载达到其上线的7/8,master就尽可能不再将请求调度至此worker

                2、lock_file /path/to/lock_file;
                    lock锁文件

                3、accept_mutex_delay    #ms;
                    accept锁模式中，一个worker进程为取得accept锁的等待时长；如果某worker进程在某次试图取得锁时失败了，至少要等待#ms才能再一次请求锁；

                4、use [epoll|rtsig|select|poll];
                    定义使用的时间模型，建议让nginx自动选择；

                5、worker_connections    #;
                    每个worker能够并发响应最大请求数；

            用于调试、定位问题：只调试nginx时使用
                1、daemon    [on|off];
                    是否让nginx运行在后台；调试的时候选off，使得所有信息直接输出到控制台，默认为on

                2、master_process    on|off;
                    是否以master/worker模式运行nginx：默认为on，调试时可设置off以方便追踪；

                3、error_log /path/to/error_log  level;
                    错误日志文件及其级别；默认为error级别，调试时可以使用debug级别，但要求叜编译时必须使用--with-debug启用debug功能

            nginx的http web功能
                必须使用虚拟主机来配置站点，每个虚拟主机使用一个server{}段配置：
                    server{

                    }

                非虚拟主机的配置或公共配置，需要定义在server之外，http之内：
                    http{
                        directive value;
                        ...

                        server {

                        }
                        server {

                        }
                        ...
                    }

                1、server {}
                    定义一个虚拟主机；nginx支持使用基于主机名或IP的虚拟主机；
                2、listen
                    listen address[:port];
                    listen port;
                    listen unix:socker_file_path;

                    default_server:
                        定义此server为http中默认的server;如果所有的server中没有任何一个使用此参数，那么第一个server即为默认server

                    rcvbuf=SIZE：接收缓冲大小
                    sndbuf=SIZE：发送缓冲大小
                    ssl：https server；

                3、server_name [...];
                    server_name可以跟多个主机名，使用空格隔开即可。名称中可以使用通配符(通常以~开头)
                    当nginx收到一个请求时，会去除其首部的server的值，而后跟众server_name进行比较；
                        (1)、先做精确匹配；     www.linuxnb.com
                        (2)、左侧通配符匹配；    *.linuxnb.com
                        (3)、右侧通配符匹配；    www.abc.com,www.*
                        (4)、正则表达式匹配；    ~^.*\.linuxnb\.com$

                4、server_name_hash_bucket_size    32|64|128;
                    为了实现快速主机查找，nginx使用hash表来保存主机名；

                5、location功能：允许根据用户请求的URI来匹配指定的各location以进行方位配置，匹配到时，将被location块中的配置所处理
                    1、location [ = | ~ | ~* | ^~ ] uri { ... }
                    2、location @name { ... }
                        比如：http://www.linuxnb.com/images/logo.gif

                        = ：精确匹配
                        ~ ：正则表达式模式匹配，匹配时区分字符大小写
                        ~* ：正则表达式模式匹配，匹配时忽略字符大小写
                        ^~ : URI前半部分匹配，不检查正则表达式

                            http://www.linuxnb.com/index.html
                            http://www.linuxnb.com/
                            http://www.linuxnb.com/documents/index.html
                            http://www.linuxnb.com/images/index.html
                            http://www.linuxnb.com/images/a.jpg

                            匹配优先级：
                                字符字面量最精确匹配、正则表达式检索(由第一个匹配到所处理)、按字符字面量

                6、文件路径定义
                    1、root  path;
                        设置web资源的路径(网页目录路径),用于指定请求的根文档目录;
                    2、alias path;
                        只能用于location中，用于路径别名；
                    3、index file ...;
                        定义默认页面，可以跟多个值，自左而右进行匹配
                    4、error_page code ... [=[response]] uri;
                        当对于某个请求返回错误时，如果匹配上了error_page指令中设定的code，则重定向到新的URI中。
                        错误页面重定向。
                        error_page 404 /404.html;          #返回404状态码
                        error_page 404 =200 /404.html;     #返回200状态码
                    5、try_files path1 [path2 ...] uri;
                        自左向右尝试读取由path所指定路径，在第一次找到即停止并返回；如果所有path都不存在，则返回最后一个url；

                        location ~* ^/documents/(.*)$ {
                            root    /www/htdocs;
                            try_files   $uri    /docu/$1    /temp.html;
                        }

                        1、http://www.linuxnb.com/documents/a.html
                        2、http://www.linuxnb.com/docu/a.html
                        3、http://www.linuxnb.com/temp.html

                        访问地址1，如果访问到则返回，如果访问不到则继续访问2，如果访问到则返回，如果访问不到则返回地址3

                7、网络连接相关的设置：
                    1、keepalive_timeout time;
                        设置保持连接的超时时间。默认为75秒。
                    2、keepalive_requests N;
                        在一次长连接上允许承载的最大请求数。
                    3、keepalive_disable [msie6 | safari | none ...]
                        对指定的浏览器禁止使用长连接；
                    4、tcp_nodelay   on|off
                        对keepalive连接是否使用TCP_NODELAY选项；
                    5、client_header_timeout     time;
                        读取http请求首部的超时时长；单位秒，默认60秒。
                    6、client_body_timeout   time;
                        读取http请求包体的超时时间；单位秒，默认60秒。
                    7、send_timeout  time;
                        发送响应的超时时长


                8、对客户端请求的限制
                    1、limit_except  method  ....  { ... }        [取反，限定method方法不可用，其余方法可用]
                        限定对范围之外的其他方法的访问控制；

                        limit_except GET{
                            allow  192.168.1.1/16;
                            deny    all;
                        }

                    2、client_max_body_size  SIZE;
                        http请求包体的最大值；常用于限定客户端所能够请求的最大包体；根据请求首部中的Content-Length来检测，以避免无用的传输

                    3、limit_rate    speed;
                        限制客户端每秒钟传输的字节数。默认为0，表示没有限制；默认单位是字节

                    4、limit_rate_after  time;
                        nginx向客户端发送响应报文时，如果时长超出了此处指定的时长，则后续的发送过程开始限速，由limit_rate的设定值限速



                9、文件操作的优化：
                    1、sendfile  on|off
                        是否启用sendfile功能

                    2、aio on|off
                        是否启用aio

                    3、open_file_cache max=N [inactive=time] | off
                        是否打开文件缓存功能；
                        max：用于定义缓存条目的最大值；当满了以后根据LRU(最近最少使用)算法进行清理置换
                        inactive：某缓存条目在指定时长内没有被访问过的时候，将自动被删除。默认为60秒。
                        并没有缓存文件的数据，只缓存了文件的源数据
                        缓存的信息包括：
                            文件句柄、文件大小和上次修改时间。
                            已经打开的目录结构；
                            没有找到或没有访问权限的信息

                    4、open_file_cache_errors    on|off
                        是否缓存文件找不到或没有访问权限等相关信息。

                    5、open_file_cache_valid     time;
                        多长时间检查一次缓存中的条目是否超出非活动时长，默认60秒；

                    6、open_file_cache_min_use   #;
                        在inactive指定的时长内被访问超出此处指定的次数的，才不会被删除。


                10、对客户端请求的特殊处理
                    1、ignore_invalid_headers    on|off
                        是否忽略不合法的http首部；默认为on；off意味着请求首部中出现不合规的首部将拒绝响应；只能用于server和http

                    2、log_not_found on|off
                        是否将文件找不到的信息也记录进错误日志中；

                    3、resolver  address;
                        指定nginx使用的dns服务器地址；

                    4、resolver_timeout  time;
                        指定DNS结息超时时长，默认为30秒；

                    5、server_tokens     on|off
                        是否在错误页面显示nginx版本号；建议不要显示，改为off

                http核心模块的内置变量：
                    $uri : 当前请求的uri，不带参数；
                    $request_uri : 请求的uri，带完整参数；
                    $host: http请求报文中host首部；如果请求中没有host首部，则以处理此请求的虚拟主机的主机名代替；
                    $hostname ： nginx服务运行在的主机的主机名；
                    $remote_addr：客户端IP
                    $remote_port：客户端port
                    $remote_user: 使用用户认证时客户端用户输入的用户名；
                    $request_filename:用户请求中的URI经过本地root或alias转换后映射的本地的文件路径；
                    $request_method：请求方法
                    $server_addr：服务器地址
                    $server_name：服务器名称(server名)
                    $server_port：服务器端口
                    $server_protocol:服务器向客户端发送响应时的协议，如http/1.1，http/1.0
                    $scheme：在请求中使用scheme，如https://www.linuxnb.com/中的https；
                    $http_HEADER：匹配请求报文中指定的HEADER，比如$http_host:匹配请求报文中的host首部(变量要小写)
                    $sent_http_HEADER:匹配响应报文中指定的HEADER，例如$http_content_type匹配响应报文中的content-type首部(变量要小写)
                    $document_root：当前请求映射到的root位置；



            配置使用nginx：
                1、nginx虚拟主机
                    server{
                        listen
                        server_name
                        root
                    }

                2、访问控制access模块(基于ip的访问控制)
                    allow
                    deny

                3、用户认证示例
                    location /admin/ {
                        root    /admin;
                        auth_basic           "admin area";
                        auth_basic_user_file conf/.htpasswd;
                    }
                    生成密码文件：
                    htpasswd -c -m /usr/local/ngxin/.passwd tom     #第一次使用-c，tom是用户，回车输入密码即可
                    htpasswd -m /usr/local/ngxin/.passwd jerry      #第二次不使用-c，jerry是用户，回车输入密码即可

                4、autoindex on;
                    建立下载站点时使用
                    location /download/ {
                        root    /download;
                        autoindex on;
                    }

                5、Limit Requests模块，限制单位时间内可以访问的次数，在一定程度上可以防范Ddos攻击

                6、access_log /spool/logs/nginx-access.log compression buffer=32k;

                7、防盗链
                    valid_referers none blocked server_names
                                   *.example.com example.* www.example.org/galleries/   #允许的主机访问
                                   ~\.google\.;                                         #允许google访问，主要是google的爬虫

                    if ($invalid_referer) {
                        return 403;
                    }

                    #当直接通过浏览器访问的时候表现为none，应该允许访问
                    #只要是valid_referers匹配不到的都是invalid_referer，拒绝访问，返回403

                    第一步：定义合规的引用
                        valid_referers none | blocked | server_names | string ...;
                    第二步：拒绝不合规的引用

                8、URL rewrite  [需要使用到pcre，所以需要安装pcre，注意点要注意]
                    使用场景：
                        将老域名跳转到新域名
                    rewrite regex replacement [flag];

                    示例：
                    location /download/ {
                        root    /www/b.org;
                        rewrite ^/images/(.*)$  /imgs/$1 last;      #如果项目修改图片目录被修改，使用此功能
                        rewrite ^/imgs/(.*)$  /images/$1;      #如果写成此死循环，则用last标记无效，还是会死循环，此时需要用到break
                    }

                    last：一旦被当前规则匹配并重写后立即停止检查后续的其他rewrite的规则，而通过重写后的规则重新发起请求
                    break：一旦被当前规则匹配并重写后立即停止检查后续的其他rewrite的规则，而后继续由nginx进行后续操作；
                    redirect:返回302临时重定向；
                    permanent:返回301永久重定向；

                    死循环示例：应该严格检查自己的重写规则，避免死循环，nginx最多循环10次，超出之后会返回500错误：
                    location /download/ {
                        root    /www/b.org;
                        rewrite ^(/download/.*)/media/(.*)\..*$  $1/media/$2.mp3 last;      #如果写成此死循环，则用last标记无效，还是会死循环，此时需要用到break
                    }

                    特别注意：一般将rewrite卸载location中的时候都使用break标志，或者将rewrite写在if上下文中进行判断：

                    rewrite_log     on|off
                        是否把重写过程记录在错误日志中，默认为notice级别；默认为off


















































