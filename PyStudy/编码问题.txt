#coding: utf-8

#编程语言，是操作计算机的
#计算机里面是电路，开关，只有开和关，0 和  1
#二进制(01010101)  0表示的是关   1表示开

# 1989,1991,  比Java语言出现的更早
# ASCII(as-key) 包含了大多数的美国人需要的符号和字母
# 由于python在全世界迅速流行，导致添加了对多种语言的支持

# 原生支持 ascii
# 辅助支持  国际语言

# 编码
# 映射(某个字符到数字的映射)

# latin-1
# utf-8
# gbk

# python的字符串出现在   “字符串”   中
# python的字符串有哪些种类
# 两个主要类别
# 1.Unicode(支持国际字符的)
# 2.Bytes(原生，并且是编码的)
# 3.bytearray(基本不用)

# Unicode 指        字符串
# Bytes 指            字节字符串

# 以你好为例
# u表示的 unicode
#  \u4f60
#  \u597d
#  这个叫做  “代码点”

#   美国人的字符  占着第一部分
#   英国人  占着第二部分  等等。

#   0 - ffff  (16进制)
#   我们把世界各地的语言，依次的放到代码点上

#   我全部都用2个字节是不是很浪费空间
#   如果我都是英文  那么明明一个字节就够了，为什么要用两个字节呢
#   所以，涉及到了一个编码的问题

#   我们需要不同的规则，来将  我们的代码点，映射到不同的数字上
例如：
    我们要做中文的编码，你们会涉及到韩文，日文，泰文吗？
 我们要做的是：
 1.拿出英文的部分
 2.拿出中文的部分
 3.简体，繁体
 因此，我们只需要代码点中的一部分
 我编码的时候，或者做映射的时候，需要把所有的代码点都考虑进去吗？
 显然不是这样的。
 因此，我们会单独再设计一个编码，专门针对咱们的中文。
 gbk
 
 再例如：
    我们要做国际化的，那么我们首先必须得考虑所有的代码点
    那么，我们是不是直接用代码点就可以了吗？
    答案：是的，但是不够好。
    
    学习JS，你经常会遇到单纯的代码点
    如果，我的客户，大多数是每周那边的人
    我主要的业务，是服务我们的英文。
    英文肯定使用的比其它字符多得多
    那么，我们所有的都用两个字节，那么是不是也浪费空间？
    因此就出现，更加专门的编码
    例如：utf-8
    英文字符：占一个字节，并且，这个部分，和ascii一样
    latin美洲:出现一些重音符号(就类似于我们拼音里的声调)
        我们使用2个字节
        总的来说，咱们utf-8由于是变长的，它使得咱们国际业务，更加节省流量
        对于中文编码来说，就不那么友好了。
        
 gbk   它使用的是，2个字节来表示中文
 
 
 1.由于Unicode是代码点，我们要再做一次‘编码’，编码到我们想要的数字式上
 所以Unicode字符串拥有 encode方法
 Unicode字符串被encode编码以后 会变成bytes字符串
 
 
 思考：我们平时拿到的到底是什么类型的字符串
        如果是个unicode，那么你根本不用担心是什么编码
        但是，如果拿到的是bytes，是不是有编码问题？
        如果拿到的是bytes，知道是什么编码，那么可以使用decode()搞定
        
解码：如果是个bytes，那么它肯定是被编码过的，被从unicode编码过来的，
            所以，它里面的东西，可以被解码成unicode，因此bytes里面有一个decode方法。
 
 
 
 
       
  
           

